import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Textarea } from './ui/textarea';
import { Checkbox } from './ui/checkbox';
import { Switch } from './ui/switch';
import { Separator } from './ui/separator';
import { Alert, AlertDescription } from './ui/alert';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from './ui/dialog';
import { useNotifications } from './NotificationContext';
import ServiceInvoiceForm from './ServiceInvoiceForm';
import { 
  getMissionOrderById, 
  validateMission,
  updateMissionServiceInvoice,
  type MissionOrder,
  getStatusColor,
  getStatusText,
  getMissionTypeText
} from './MissionOrderService';
import { createClient } from '../utils/supabase/client';
import { projectId, publicAnonKey } from '../utils/supabase/info';
import { 
  ArrowLeft,
  CheckCircle, 
  AlertTriangle,
  Calendar,
  User,
  Plane,
  DollarSign,
  CreditCard,
  FileText,
  Clock,
  MapPin,
  Edit,
  Send,
  Receipt
} from 'lucide-react';

interface RIBInfo {
  iban: string;
  bic: string;
  accountHolder: string;
  bankName: string;
}

interface DateModificationRequest {
  originalStartDate: string;
  originalEndDate: string;
  newStartDate: string;
  newEndDate: string;
  reason: string;
}

interface ServiceInvoiceData {
  lines: Array<{
    id: string;
    description: string;
    quantity: number;
    unitPrice: number;
    total: number;
    category: string;
    isAutoGenerated?: boolean;
  }>;
  subtotal: number;
  taxRate: number;
  taxAmount: number;
  total: number;
  currency: string;
  notes: string;
  invoiceNumber: string;
  invoiceDate: string;
  vatNumber: string;
  externalInvoiceFile?: File;
}

export default function MissionValidation() {
  const { missionId } = useParams<{ missionId: string }>();
  const navigate = useNavigate();
  const { showToast } = useNotifications();
  
  const [mission, setMission] = useState<MissionOrder | null>(null);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [showDateModificationModal, setShowDateModificationModal] = useState(false);
  
  // Date modification state
  const [dateModificationRequest, setDateModificationRequest] = useState<DateModificationRequest>({
    originalStartDate: '',
    originalEndDate: '',
    newStartDate: '',
    newEndDate: '',
    reason: ''
  });
  
  // Validation form state
  const [validationData, setValidationData] = useState({
    crewComments: '',
    ribConfirmed: false,
    paymentIssue: false,
    paymentIssueDetails: '',
    issuesReported: [] as string[],
    dateModification: null as DateModificationRequest | null,
    serviceInvoice: null as ServiceInvoiceData | null
  });
  
  // RIB management state
  const [currentRIB, setCurrentRIB] = useState<RIBInfo>({
    iban: '',
    bic: '',
    accountHolder: '',
    bankName: ''
  });
  
  const [ribNeedsUpdate, setRibNeedsUpdate] = useState(false);
  const [newRIB, setNewRIB] = useState<RIBInfo>({
    iban: '',
    bic: '',
    accountHolder: '',
    bankName: ''
  });

  // Load mission data
  useEffect(() => {
    const loadMission = async () => {
      if (!missionId) {
        navigate('/missions');
        return;
      }
      
      try {
        setLoading(true);
        const missionData = await getMissionOrderById(missionId);
        
        if (!missionData) {
          showToast('error', 'Erreur', 'Mission introuvable');
          navigate('/missions');
          return;
        }
        
        console.log('Mission status:', missionData.status, 'for mission:', missionId);
        
        if (missionData.status !== 'pending_validation' && missionData.status !== 'pending_date_modification') {
          showToast('warning', 'Attention', `Cette mission ne nécessite pas de validation (status: ${missionData.status})`);
          navigate('/missions');
          return;
        }
        
        setMission(missionData);
        
        // Initialize date modification request with current dates
        setDateModificationRequest({
          originalStartDate: missionData.contract.startDate,
          originalEndDate: missionData.contract.endDate,
          newStartDate: missionData.contract.startDate,
          newEndDate: missionData.contract.endDate,
          reason: ''
        });
        
        // Load current user's RIB info (mock data for now)
        setCurrentRIB({
          iban: 'FR76 1234 5678 9012 3456 7890 123',
          bic: 'BNPAFRPP',
          accountHolder: missionData.crew.name,
          bankName: 'BNP Paribas'
        });
        
      } catch (error) {
        console.error('Error loading mission:', error);
        showToast('error', 'Erreur', 'Impossible de charger la mission');
        navigate('/missions');
      } finally {
        setLoading(false);
      }
    };

    loadMission();
  }, [missionId, navigate, showToast]);

  const handleIssueToggle = (issue: string, checked: boolean) => {
    setValidationData(prev => ({
      ...prev,
      issuesReported: checked 
        ? [...prev.issuesReported, issue]
        : prev.issuesReported.filter(i => i !== issue)
    }));
  };

  const handleRIBUpdate = (field: keyof RIBInfo, value: string) => {
    setNewRIB(prev => ({ ...prev, [field]: value }));
  };

  const handleDateModificationRequestChange = (field: keyof DateModificationRequest, value: string) => {
    setDateModificationRequest(prev => ({ ...prev, [field]: value }));
  };

  const handleDateModificationSubmit = () => {
    if (!dateModificationRequest.reason.trim()) {
      showToast('error', 'Motif requis', 'Veuillez expliquer pourquoi les dates doivent être modifiées');
      return;
    }
    
    if (dateModificationRequest.newStartDate === dateModificationRequest.originalStartDate &&
        dateModificationRequest.newEndDate === dateModificationRequest.originalEndDate) {
      showToast('warning', 'Aucune modification', 'Les nouvelles dates sont identiques aux dates originales');
      return;
    }
    
    setValidationData(prev => ({
      ...prev,
      dateModification: dateModificationRequest
    }));
    
    setShowDateModificationModal(false);
    showToast('success', 'Demande de modification enregistrée', 'Votre demande sera envoyée avec la validation');
  };

  const handleServiceInvoiceChange = (invoiceData: ServiceInvoiceData) => {
    setValidationData(prev => ({
      ...prev,
      serviceInvoice: invoiceData
    }));
  };

  const calculateMissionDuration = (startDate: string, endDate: string) => {
    if (!startDate || !endDate) return 1;
    const start = new Date(startDate);
    const end = new Date(endDate);
    const diffTime = Math.abs(end.getTime() - start.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
    return diffDays;
  };

  const calculateTotalCompensation = (startDate?: string, endDate?: string) => {
    if (!mission?.contract) return { salary: 0, perDiem: 0, total: 0, currency: 'EUR' };
    
    const effectiveStartDate = startDate || mission.contract.startDate;
    const effectiveEndDate = endDate || mission.contract.endDate;
    
    const days = calculateMissionDuration(effectiveStartDate, effectiveEndDate);
    const salaryAmount = mission.contract.salaryAmount || 0;
    const salary = mission.contract.salaryType === 'daily' 
      ? salaryAmount * days 
      : salaryAmount;
    
    const perDiem = mission.contract.hasPerDiem 
      ? (mission.contract.perDiemAmount || 0) * days 
      : 0;
    
    return {
      salary,
      perDiem,
      total: salary + perDiem,
      currency: mission.contract.salaryCurrency || 'EUR'
    };
  };

  const handleSubmit = async () => {
    try {
      setSubmitting(true);
      
      // Validation checks
      if (!validationData.ribConfirmed && !ribNeedsUpdate) {
        showToast('error', 'Validation requise', 'Veuillez confirmer vos informations RIB ou signaler un problème');
        return;
      }
      
      if (validationData.paymentIssue && !validationData.paymentIssueDetails.trim()) {
        showToast('error', 'Détails requis', 'Veuillez décrire le problème de paiement');
        return;
      }
      
      if (ribNeedsUpdate) {
        if (!newRIB.iban || !newRIB.bic || !newRIB.accountHolder) {
          showToast('error', 'RIB incomplet', 'Veuillez remplir tous les champs RIB obligatoires');
          return;
        }
      }

      // Validation for service missions - PDF obligatoire
      if (mission.type === 'service') {
        if (!validationData.serviceInvoice) {
          showToast('error', 'Facturation requise', 'Veuillez compléter la facturation pour cette mission de service');
          return;
        }
        
        const invoice = validationData.serviceInvoice;
        
        // PDF is mandatory
        if (!invoice.externalInvoiceFile) {
          showToast('error', 'Facture PDF obligatoire', 'Vous devez uploader une facture au format PDF');
          return;
        }
        
        // VAT number is mandatory
        if (!invoice.vatNumber || !invoice.vatNumber.trim()) {
          showToast('error', 'Numéro de TVA requis', 'Veuillez renseigner votre numéro de TVA');
          return;
        }
        
        // Check that lines exist (should be auto-generated)
        if (!invoice.lines || invoice.lines.length === 0) {
          showToast('error', 'Lignes de facturation manquantes', 'Les lignes de facturation sont requises');
          return;
        }
      }
      
      const finalValidationData = {
        ...validationData,
        ribConfirmed: validationData.ribConfirmed || ribNeedsUpdate,
        newRIB: ribNeedsUpdate ? newRIB : undefined
      };
      
      // If there's a date modification request, send it to admin for approval
      if (validationData.dateModification) {
        try {
          // Send the date modification request to the backend
          const response = await fetch(`https://${projectId}.supabase.co/functions/v1/make-server-9fd39b98/missions/${missionId}/date-modification-request`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${publicAnonKey}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              originalDates: {
                startDate: validationData.dateModification.originalStartDate,
                endDate: validationData.dateModification.originalEndDate
              },
              newDates: {
                startDate: validationData.dateModification.newStartDate,
                endDate: validationData.dateModification.newEndDate
              },
              reason: validationData.dateModification.reason
            })
          });
          
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
          
          showToast('success', 'Demande envoyée', 'Votre demande de modification des dates a été envoyée aux administrateurs');
        } catch (error) {
          console.error('Error requesting date modification:', error);
          showToast('warning', 'Avertissement', 'La demande de modification n\'a pas pu être envoyée, mais la validation continuera');
        }
      }
      
      try {
        // Pour les missions de service, synchroniser d'abord la facture avec l'ordre final
        if (mission.type === 'service' && validationData.serviceInvoice) {
          try {
            console.log('Synchronizing invoice data with final order...');
            await updateMissionServiceInvoice(missionId!, validationData.serviceInvoice);
            showToast('success', 'Facture synchronisée', 'Les données de facturation ont été appliquées à l\'ordre final');
          } catch (invoiceError) {
            console.error('Error updating mission with invoice data:', invoiceError);
            showToast('warning', 'Avertissement', 'La facture n\'a pas pu être synchronisée avec l\'ordre final, mais la validation continuera');
          }
        }
        
        await validateMission(missionId!, finalValidationData);
        
        if (validationData.dateModification) {
          showToast('success', 'Validation avec demande de modification', 'Votre validation a été enregistrée. La demande de modification des dates est en cours de traitement par les administrateurs.');
        } else {
          const successMessage = mission.type === 'service' 
            ? 'Votre validation a été enregistrée avec succès. L\'ordre final utilise maintenant les montants de votre facture.'
            : 'Votre validation a été enregistrée avec succès';
          showToast('success', 'Validation complète', successMessage);
        }
        
        // Trigger mission order update event
        window.dispatchEvent(new CustomEvent('missionOrderUpdated'));
        
        navigate('/missions');
      } catch (error) {
        console.error('Error validating mission:', error);
        
        // Check if it's the specific 400 error about mission status
        const errorMessage = error instanceof Error ? error.message : String(error);
        if (errorMessage.includes('Mission is not in pending validation status')) {
          showToast('warning', 'Validation non nécessaire', 'Cette mission a déjà été validée ou n\'est pas dans le bon statut pour être validée.');
          navigate('/missions');
        } else {
          showToast('error', 'Erreur', 'Impossible de valider la mission. Veuillez réessayer.');
        }
      }
      
    } catch (error) {
      console.error('Error during validation process:', error);
      showToast('error', 'Erreur', 'Une erreur inattendue s\'est produite');
    } finally {
      setSubmitting(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('fr-FR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>
    );
  }

  if (!mission) {
    return (
      <div className="space-y-6">
        <Card>
          <CardContent className="p-8 text-center">
            <AlertTriangle className="h-8 w-8 mx-auto mb-4 text-red-500" />
            <h3 className="text-lg text-gray-900 mb-2">Mission introuvable</h3>
            <Button onClick={() => navigate('/missions')}>
              Retour aux missions
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  const compensation = calculateTotalCompensation();
  const modifiedCompensation = validationData.dateModification ? 
    calculateTotalCompensation(dateModificationRequest.newStartDate, dateModificationRequest.newEndDate) : 
    compensation;
  const duration = calculateMissionDuration(mission.contract.startDate, mission.contract.endDate);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => navigate('/missions')}
            className="flex items-center space-x-2"
          >
            <ArrowLeft className="h-4 w-4" />
            <span>Retour aux missions</span>
          </Button>
          <Separator orientation="vertical" className="h-6" />
          <div>
            <h1 className="text-2xl text-gray-900">Validation de mission</h1>
            <div className="flex items-center space-x-2 mt-1">
              <Badge variant="outline" className="text-sm">{mission.id}</Badge>
              <Badge className={getStatusColor(mission.status)}>
                {getStatusText(mission.status)}
              </Badge>
              <Badge className="bg-purple-100 text-purple-800">
                {getMissionTypeText(mission.type)}
              </Badge>
            </div>
          </div>
        </div>
      </div>

      {/* Validation Alert */}
      <Alert className="border-orange-200 bg-orange-50">
        <Clock className="h-4 w-4 text-orange-600" />
        <AlertDescription>
          <p className="text-orange-800 text-sm">
            <strong>Validation requise :</strong> Cette mission est terminée et nécessite votre validation. 
            Vous pouvez modifier les dates si la mission a duré plus longtemps que prévu.
          </p>
        </AlertDescription>
      </Alert>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Mission Summary */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <FileText className="h-5 w-5" />
                <span>Récapitulatif de la mission</span>
              </div>
              <Dialog open={showDateModificationModal} onOpenChange={setShowDateModificationModal}>
                <DialogTrigger asChild>
                  <Button variant="outline" size="sm" className="flex items-center space-x-2">
                    <Edit className="h-4 w-4" />
                    <span>Modifier les dates</span>
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-md">
                  <DialogHeader>
                    <DialogTitle>Modification des dates</DialogTitle>
                    <DialogDescription>
                      Si la mission a duré plus longtemps que prévu, vous pouvez ajuster les dates. 
                      Cette demande sera envoyée aux administrateurs pour validation.
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label>Dates actuelles</Label>
                      <div className="text-sm text-gray-600 bg-gray-50 p-2 rounded">
                        Du {formatDate(dateModificationRequest.originalStartDate)} au {formatDate(dateModificationRequest.originalEndDate)}
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="newStartDate">Nouvelle date de début</Label>
                      <Input
                        id="newStartDate"
                        type="date"
                        value={dateModificationRequest.newStartDate}
                        onChange={(e) => handleDateModificationRequestChange('newStartDate', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="newEndDate">Nouvelle date de fin</Label>
                      <Input
                        id="newEndDate"
                        type="date"
                        value={dateModificationRequest.newEndDate}
                        onChange={(e) => handleDateModificationRequestChange('newEndDate', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="modificationReason">Motif de la modification *</Label>
                      <Textarea
                        id="modificationReason"
                        placeholder="Expliquez pourquoi les dates doivent être modifiées..."
                        value={dateModificationRequest.reason}
                        onChange={(e) => handleDateModificationRequestChange('reason', e.target.value)}
                        rows={3}
                      />
                    </div>
                  </div>
                  <DialogFooter>
                    <Button variant="outline" onClick={() => setShowDateModificationModal(false)}>
                      Annuler
                    </Button>
                    <Button onClick={handleDateModificationSubmit}>
                      Enregistrer la demande
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {validationData.dateModification && (
              <Alert className="border-blue-200 bg-blue-50">
                <Send className="h-4 w-4 text-blue-600" />
                <AlertDescription>
                  <p className="text-blue-800 text-sm">
                    <strong>Demande de modification enregistrée :</strong> Du {formatDate(dateModificationRequest.newStartDate)} au {formatDate(dateModificationRequest.newEndDate)}
                  </p>
                </AlertDescription>
              </Alert>
            )}
            
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div className="flex items-center space-x-2">
                <User className="h-4 w-4 text-gray-400" />
                <div>
                  <p className="text-gray-900">{mission.crew.name}</p>
                  <p className="text-gray-500">{mission.crew.position}</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <Plane className="h-4 w-4 text-gray-400" />
                <div>
                  <p className="text-gray-900">{mission.aircraft.immat}</p>
                  <p className="text-gray-500">{mission.aircraft.type}</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <Calendar className="h-4 w-4 text-gray-400" />
                <div>
                  {validationData.dateModification ? (
                    <>
                      <p className="text-gray-900">
                        {calculateMissionDuration(dateModificationRequest.newStartDate, dateModificationRequest.newEndDate)} jour(s)
                        <span className="text-blue-600 text-xs ml-1">(modifié)</span>
                      </p>
                      <p className="text-gray-500">
                        {formatDate(dateModificationRequest.newStartDate)} - {formatDate(dateModificationRequest.newEndDate)}
                      </p>
                    </>
                  ) : (
                    <>
                      <p className="text-gray-900">{duration} jour(s)</p>
                      <p className="text-gray-500">
                        {formatDate(mission.contract.startDate)} - {formatDate(mission.contract.endDate)}
                      </p>
                    </>
                  )}
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <DollarSign className="h-4 w-4 text-gray-400" />
                <div>
                  {validationData.dateModification ? (
                    <>
                      <p className="text-gray-900">
                        {modifiedCompensation.total.toLocaleString()} {modifiedCompensation.currency}
                        <span className="text-blue-600 text-xs ml-1">(recalculé)</span>
                      </p>
                      <p className="text-gray-500">
                        Salaire: {modifiedCompensation.salary.toLocaleString()} {modifiedCompensation.currency}
                        {modifiedCompensation.perDiem > 0 && ` + Per diem: ${modifiedCompensation.perDiem.toLocaleString()} ${modifiedCompensation.currency}`}
                      </p>
                    </>
                  ) : (
                    <>
                      <p className="text-gray-900">{compensation.total.toLocaleString()} {compensation.currency}</p>
                      <p className="text-gray-500">
                        Salaire: {compensation.salary.toLocaleString()} {compensation.currency}
                        {compensation.perDiem > 0 && ` + Per diem: ${compensation.perDiem.toLocaleString()} ${compensation.currency}`}
                      </p>
                    </>
                  )}
                </div>
              </div>
            </div>

            <Separator />

            {/* Flights */}
            <div className="space-y-2">
              <h4 className="text-sm text-gray-700">Vols effectués:</h4>
              <div className="space-y-1">
                {mission.flights.map((flight) => (
                  <div key={flight.id} className="flex items-center justify-between text-sm bg-gray-50 p-2 rounded">
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline" className="text-xs">{flight.flight}</Badge>
                      <MapPin className="h-3 w-3 text-gray-400" />
                      <span>{flight.departure} → {flight.arrival}</span>
                    </div>
                    <div className="text-gray-600">
                      {formatDate(flight.date)} {flight.time}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* RIB Information */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <CreditCard className="h-5 w-5" />
              <span>Informations de paiement</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <h4 className="text-sm text-gray-700">RIB actuellement enregistré :</h4>
              <div className="bg-gray-50 p-3 rounded space-y-2">
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">IBAN:</span>
                    <p className="text-gray-900">{currentRIB.iban}</p>
                  </div>
                  <div>
                    <span className="text-gray-600">BIC:</span>
                    <p className="text-gray-900">{currentRIB.bic}</p>
                  </div>
                  <div>
                    <span className="text-gray-600">Titulaire:</span>
                    <p className="text-gray-900">{currentRIB.accountHolder}</p>
                  </div>
                  <div>
                    <span className="text-gray-600">Banque:</span>
                    <p className="text-gray-900">{currentRIB.bankName}</p>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center space-x-3">
                <Checkbox
                  id="ribConfirmed"
                  checked={validationData.ribConfirmed && !ribNeedsUpdate}
                  onCheckedChange={(checked) => {
                    setValidationData(prev => ({ ...prev, ribConfirmed: !!checked }));
                    if (checked) setRibNeedsUpdate(false);
                  }}
                  disabled={ribNeedsUpdate}
                />
                <Label htmlFor="ribConfirmed" className="text-sm">
                  Je confirme que ces informations RIB sont correctes
                </Label>
              </div>
              
              <div className="flex items-center space-x-3">
                <Switch
                  checked={ribNeedsUpdate}
                  onCheckedChange={(checked) => {
                    setRibNeedsUpdate(checked);
                    if (checked) setValidationData(prev => ({ ...prev, ribConfirmed: false }));
                  }}
                />
                <Label className="text-sm">
                  Mon RIB a changé - je veux le mettre à jour
                </Label>
              </div>
            </div>

            {ribNeedsUpdate && (
              <div className="space-y-4 border-t pt-4">
                <h4 className="text-sm text-gray-700">Nouveau RIB :</h4>
                <div className="grid grid-cols-1 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="newIban">IBAN *</Label>
                    <Input
                      id="newIban"
                      placeholder="FR76 1234 5678 9012 3456 7890 123"
                      value={newRIB.iban}
                      onChange={(e) => handleRIBUpdate('iban', e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="newBic">BIC *</Label>
                    <Input
                      id="newBic"
                      placeholder="BNPAFRPP"
                      value={newRIB.bic}
                      onChange={(e) => handleRIBUpdate('bic', e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="newAccountHolder">Titulaire du compte *</Label>
                    <Input
                      id="newAccountHolder"
                      placeholder="Nom du titulaire"
                      value={newRIB.accountHolder}
                      onChange={(e) => handleRIBUpdate('accountHolder', e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="newBankName">Nom de la banque</Label>
                    <Input
                      id="newBankName"
                      placeholder="Nom de la banque"
                      value={newRIB.bankName}
                      onChange={(e) => handleRIBUpdate('bankName', e.target.value)}
                    />
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Service Invoice Form - Only for service missions */}
      {mission.type === 'service' && (
        <ServiceInvoiceForm
          missionId={mission.id}
          crewName={mission.crew.name}
          missionData={mission}
          onInvoiceChange={handleServiceInvoiceChange}
          initialData={validationData.serviceInvoice || undefined}
        />
      )}

      {/* Validation Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <CheckCircle className="h-5 w-5" />
            <span>Validation de la mission</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Service Invoice Summary */}
          {mission.type === 'service' && validationData.serviceInvoice && (
            <Alert className="border-purple-200 bg-purple-50">
              <Receipt className="h-4 w-4 text-purple-600" />
              <AlertDescription>
                <div className="text-purple-800">
                  <strong>Facturation service:</strong> 
                  {validationData.serviceInvoice.externalInvoiceFile ? (
                    <span> Facture externe uploadée ({validationData.serviceInvoice.externalInvoiceFile.name})</span>
                  ) : (
                    <span> {validationData.serviceInvoice.lines.length} ligne(s) - Total: {validationData.serviceInvoice.total.toFixed(2)} {validationData.serviceInvoice.currency}</span>
                  )}
                </div>
              </AlertDescription>
            </Alert>
          )}

          {/* Comments */}
          <div className="space-y-2">
            <Label htmlFor="comments">Commentaires sur la mission</Label>
            <Textarea
              id="comments"
              placeholder="Ajoutez vos commentaires sur le déroulement de la mission (optionnel)..."
              value={validationData.crewComments}
              onChange={(e) => setValidationData(prev => ({ ...prev, crewComments: e.target.value }))}
              rows={3}
            />
          </div>

          <Separator />

          {/* Issues Reporting */}
          <div className="space-y-4">
            <h4 className="text-sm text-gray-700">Signaler des problèmes (optionnel) :</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {[
                'Retard de vol',
                'Problème technique avion',
                'Modification d\'horaire',
                'Frais supplémentaires engagés',
                'Problème d\'hébergement',
                'Transport non fourni'
              ].map((issue) => (
                <div key={issue} className="flex items-center space-x-2">
                  <Checkbox
                    id={issue}
                    checked={validationData.issuesReported.includes(issue)}
                    onCheckedChange={(checked) => handleIssueToggle(issue, !!checked)}
                  />
                  <Label htmlFor={issue} className="text-sm">{issue}</Label>
                </div>
              ))}
            </div>
          </div>

          <Separator />

          {/* Payment Issues */}
          <div className="space-y-4">
            <div className="flex items-center space-x-3">
              <Switch
                checked={validationData.paymentIssue}
                onCheckedChange={(checked) => setValidationData(prev => ({ ...prev, paymentIssue: checked }))}
              />
              <Label className="text-sm">
                Signaler un problème de paiement ou de facturation
              </Label>
            </div>

            {validationData.paymentIssue && (
              <div className="space-y-2">
                <Label htmlFor="paymentIssueDetails">Détails du problème de paiement *</Label>
                <Textarea
                  id="paymentIssueDetails"
                  placeholder="Décrivez le problème de paiement en détail..."
                  value={validationData.paymentIssueDetails}
                  onChange={(e) => setValidationData(prev => ({ ...prev, paymentIssueDetails: e.target.value }))}
                  rows={3}
                />
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Submit Button */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          {!validationData.ribConfirmed && !ribNeedsUpdate && (
            <div className="flex items-center space-x-2 text-orange-600">
              <AlertTriangle className="h-4 w-4" />
              <span className="text-sm">Veuillez confirmer vos informations RIB</span>
            </div>
          )}
          {validationData.dateModification && (
            <div className="flex items-center space-x-2 text-blue-600">
              <Send className="h-4 w-4" />
              <span className="text-sm">Demande de modification des dates enregistrée</span>
            </div>
          )}
        </div>
        <Button 
          onClick={handleSubmit} 
          disabled={(!validationData.ribConfirmed && !ribNeedsUpdate) || submitting}
          className="flex items-center space-x-2"
        >
          <CheckCircle className="h-4 w-4" />
          <span>{submitting ? 'Validation en cours...' : 'Valider la mission'}</span>
        </Button>
      </div>
    </div>
  );
}