import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Textarea } from './ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Separator } from './ui/separator';
import { Alert, AlertDescription } from './ui/alert';
import { Badge } from './ui/badge';
import { 
  Plus, 
  Trash2, 
  Upload, 
  FileText,
  Download,
  Euro,
  Receipt,
  AlertCircle,
  CheckCircle,
  Lock
} from 'lucide-react';
import { useTranslation } from './LanguageProvider';

interface InvoiceLine {
  id: string;
  description: string;
  quantity: number;
  unitPrice: number;
  total: number;
  category: string;
  isAutoGenerated?: boolean;
}

interface ServiceInvoiceData {
  lines: InvoiceLine[];
  contractSubtotal: number; // Total du contrat de base (salaire + per diem)
  expensesSubtotal: number; // Total des dépenses annexes ajoutées
  subtotal: number; // Total général avant taxes
  taxRate: number;
  taxAmount: number;
  total: number; // Total final incluant contrat + dépenses + taxes
  currency: string;
  notes: string;
  invoiceNumber: string;
  invoiceDate: string;
  companyName: string; // Nom de l'entreprise du freelancer
  vatNumber: string; // Numéro de TVA
  externalInvoiceFile?: File;
}

interface ServiceInvoiceFormProps {
  missionId: string;
  crewName: string;
  missionData?: {
    contract?: {
      startDate: string;
      endDate: string;
      salaryAmount?: number;
      salaryType: 'daily' | 'monthly';
      salaryCurrency?: string;
      hasPerDiem?: boolean;
      perDiemAmount?: number;
    };
  };
  onInvoiceChange: (data: ServiceInvoiceData) => void;
  initialData?: Partial<ServiceInvoiceData>;
}

const invoiceCategories = [
  { value: 'salary', label: 'Salaire' },
  { value: 'per_diem', label: 'Per Diem' },
  { value: 'transport', label: 'Transport' },
  { value: 'accommodation', label: 'Hébergement' },
  { value: 'meals', label: 'Repas' },
  { value: 'fuel', label: 'Carburant' },
  { value: 'maintenance', label: 'Maintenance' },
  { value: 'equipment', label: 'Équipement' },
  { value: 'communication', label: 'Communication' },
  { value: 'other', label: 'Autre' }
];

const getCategoryLabel = (category: string): string => {
  const cat = invoiceCategories.find(c => c.value === category);
  return cat ? cat.label : category.charAt(0).toUpperCase() + category.slice(1);
};

export default function ServiceInvoiceForm({ 
  missionId, 
  crewName, 
  missionData,
  onInvoiceChange, 
  initialData 
}: ServiceInvoiceFormProps) {
  const { t } = useTranslation();
  const [invoiceData, setInvoiceData] = useState<ServiceInvoiceData>({
    lines: initialData?.lines || [],
    contractSubtotal: initialData?.contractSubtotal || 0,
    expensesSubtotal: initialData?.expensesSubtotal || 0,
    subtotal: initialData?.subtotal || 0,
    taxRate: initialData?.taxRate || 20,
    taxAmount: initialData?.taxAmount || 0,
    total: initialData?.total || 0,
    currency: initialData?.currency || 'EUR',
    notes: initialData?.notes || '',
    invoiceNumber: initialData?.invoiceNumber || `INV-${missionId}-${Date.now()}`,
    invoiceDate: initialData?.invoiceDate || new Date().toISOString().split('T')[0],
    companyName: initialData?.companyName || '',
    vatNumber: initialData?.vatNumber || '',
    externalInvoiceFile: initialData?.externalInvoiceFile
  });

  // Auto-generate mission-related lines on component mount
  useEffect(() => {
    if (missionData?.contract && invoiceData.lines.length === 0) {
      const autoLines: InvoiceLine[] = [];
      
      // Calculate mission duration
      const startDate = new Date(missionData.contract.startDate);
      const endDate = new Date(missionData.contract.endDate);
      const diffTime = Math.abs(endDate.getTime() - startDate.getTime());
      const days = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;

      // Add salary line
      if (missionData.contract.salaryAmount) {
        const salaryQuantity = missionData.contract.salaryType === 'daily' ? days : 1;
        const salaryUnitPrice = missionData.contract.salaryAmount;
        const salaryTotal = salaryQuantity * salaryUnitPrice;

        autoLines.push({
          id: `auto-salary-${Date.now()}`,
          description: `Prestation ${missionData.contract.salaryType === 'daily' ? 'journalière' : 'mensuelle'} - Mission ${missionId}`,
          quantity: salaryQuantity,
          unitPrice: salaryUnitPrice,
          total: salaryTotal,
          category: 'salary',
          isAutoGenerated: true
        });
      }

      // Add per diem line if applicable
      if (missionData.contract.hasPerDiem && missionData.contract.perDiemAmount) {
        const perDiemTotal = days * missionData.contract.perDiemAmount;
        
        autoLines.push({
          id: `auto-perdiem-${Date.now()}`,
          description: `Indemnités journalières - ${days} jour(s)`,
          quantity: days,
          unitPrice: missionData.contract.perDiemAmount,
          total: perDiemTotal,
          category: 'per_diem',
          isAutoGenerated: true
        });
      }

      if (autoLines.length > 0) {
        const { contractSubtotal, expensesSubtotal, subtotal, taxAmount, total } = calculateTotals(autoLines, invoiceData.taxRate);
        
        const updatedData = {
          ...invoiceData,
          lines: autoLines,
          contractSubtotal,
          expensesSubtotal,
          subtotal,
          taxAmount,
          total,
          currency: missionData.contract.salaryCurrency || 'EUR'
        };
        
        setInvoiceData(updatedData);
        onInvoiceChange(updatedData);
      }
    }
  }, [missionData]);

  const calculateTotals = (lines: InvoiceLine[], taxRate: number) => {
    // Séparer les lignes de contrat (auto-générées) des dépenses
    const contractLines = lines.filter(line => line.isAutoGenerated);
    const expenseLines = lines.filter(line => !line.isAutoGenerated);
    
    const contractSubtotal = contractLines.reduce((sum, line) => sum + line.total, 0);
    const expensesSubtotal = expenseLines.reduce((sum, line) => sum + line.total, 0);
    const subtotal = contractSubtotal + expensesSubtotal;
    
    const taxAmount = (subtotal * taxRate) / 100;
    const total = subtotal + taxAmount;
    
    return { contractSubtotal, expensesSubtotal, subtotal, taxAmount, total };
  };

  const addLine = () => {
    const newLine: InvoiceLine = {
      id: `line-${Date.now()}`,
      description: '',
      quantity: 1,
      unitPrice: 0,
      total: 0,
      category: 'other',
      isAutoGenerated: false
    };

    const updatedLines = [...invoiceData.lines, newLine];
    const { contractSubtotal, expensesSubtotal, subtotal, taxAmount, total } = calculateTotals(updatedLines, invoiceData.taxRate);
    
    const updatedData = {
      ...invoiceData,
      lines: updatedLines,
      contractSubtotal,
      expensesSubtotal,
      subtotal,
      taxAmount,
      total
    };
    
    setInvoiceData(updatedData);
    onInvoiceChange(updatedData);
  };

  const removeLine = (lineId: string) => {
    // Prevent removal of auto-generated lines
    const lineToRemove = invoiceData.lines.find(line => line.id === lineId);
    if (lineToRemove?.isAutoGenerated) {
      return;
    }

    const updatedLines = invoiceData.lines.filter(line => line.id !== lineId);
    const { contractSubtotal, expensesSubtotal, subtotal, taxAmount, total } = calculateTotals(updatedLines, invoiceData.taxRate);
    
    const updatedData = {
      ...invoiceData,
      lines: updatedLines,
      contractSubtotal,
      expensesSubtotal,
      subtotal,
      taxAmount,
      total
    };
    
    setInvoiceData(updatedData);
    onInvoiceChange(updatedData);
  };

  const updateLine = (lineId: string, field: keyof InvoiceLine, value: any) => {
    // Prevent editing of auto-generated lines
    const lineToUpdate = invoiceData.lines.find(line => line.id === lineId);
    if (lineToUpdate?.isAutoGenerated) {
      return;
    }

    const updatedLines = invoiceData.lines.map(line => {
      if (line.id === lineId) {
        const updatedLine = { ...line, [field]: value };
        // Recalculate line total
        if (field === 'quantity' || field === 'unitPrice') {
          updatedLine.total = updatedLine.quantity * updatedLine.unitPrice;
        }
        return updatedLine;
      }
      return line;
    });

    const { contractSubtotal, expensesSubtotal, subtotal, taxAmount, total } = calculateTotals(updatedLines, invoiceData.taxRate);
    
    const updatedData = {
      ...invoiceData,
      lines: updatedLines,
      contractSubtotal,
      expensesSubtotal,
      subtotal,
      taxAmount,
      total
    };
    
    setInvoiceData(updatedData);
    onInvoiceChange(updatedData);
  };

  const updateTaxRate = (taxRate: number) => {
    const { contractSubtotal, expensesSubtotal, subtotal, taxAmount, total } = calculateTotals(invoiceData.lines, taxRate);
    
    const updatedData = {
      ...invoiceData,
      taxRate,
      contractSubtotal,
      expensesSubtotal,
      taxAmount,
      total
    };
    
    setInvoiceData(updatedData);
    onInvoiceChange(updatedData);
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.type === 'application/pdf') {
      const updatedData = {
        ...invoiceData,
        externalInvoiceFile: file
      };
      
      setInvoiceData(updatedData);
      onInvoiceChange(updatedData);
    }
  };

  const generateInternalInvoice = () => {
    // Cette fonction générerait un PDF de la facture interne
    console.log('Generating internal invoice for mission:', missionId);
    console.log('Invoice data:', invoiceData);
    
    // Pour l'instant, on simule le téléchargement
    const invoiceContent = `
FACTURE DE SERVICE - ${invoiceData.invoiceNumber}
Date: ${new Date(invoiceData.invoiceDate).toLocaleDateString('fr-FR')}
Mission: ${missionId}
Entreprise: ${invoiceData.companyName}
Prestataire: ${crewName}
N° TVA: ${invoiceData.vatNumber}

DÉTAIL DES PRESTATIONS:
${invoiceData.lines.map(line => 
  `${line.description} - ${line.quantity} x ${line.unitPrice}€ = ${line.total}€${line.isAutoGenerated ? ' (Contrat)' : ' (Dépense)'}`
).join('\n')}

RÉCAPITULATIF:
${invoiceData.contractSubtotal > 0 ? `Contrat de base: ${invoiceData.contractSubtotal.toFixed(2)}€` : ''}
${invoiceData.expensesSubtotal > 0 ? `Dépenses annexes: ${invoiceData.expensesSubtotal.toFixed(2)}€` : ''}
Sous-total HT: ${invoiceData.subtotal.toFixed(2)}€
TVA (${invoiceData.taxRate}%): ${invoiceData.taxAmount.toFixed(2)}€
TOTAL TTC: ${invoiceData.total.toFixed(2)}€

Notes: ${invoiceData.notes}
    `;

    const blob = new Blob([invoiceContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${invoiceData.invoiceNumber}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Invoice Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Receipt className="h-5 w-5" />
            <span>Facturation Service</span>
          </CardTitle>
          <p className="text-sm text-gray-600">
            Complétez les détails de facturation pour cette mission de service. Le montant total final comprendra la rémunération du contrat et les dépenses annexes que vous ajoutez.
          </p>
        </CardHeader>
      </Card>

      {/* Internal Invoice Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <FileText className="h-5 w-5" />
              <span>Détail des frais</span>
            </div>
            <div className="flex items-center space-x-2">
              <Badge variant="outline">
                {invoiceData.invoiceNumber}
              </Badge>
              <Button 
                variant="outline" 
                size="sm"
                onClick={generateInternalInvoice}
                disabled={invoiceData.lines.length === 0}
                className="flex items-center space-x-2"
              >
                <Download className="h-4 w-4" />
                <span>Générer PDF</span>
              </Button>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Invoice Header Info */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="companyName">Nom de l'entreprise *</Label>
              <Input
                id="companyName"
                placeholder="Nom de votre entreprise"
                value={invoiceData.companyName}
                onChange={(e) => {
                  const updatedData = { ...invoiceData, companyName: e.target.value };
                  setInvoiceData(updatedData);
                  onInvoiceChange(updatedData);
                }}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="vatNumber">Numéro de TVA *</Label>
              <Input
                id="vatNumber"
                placeholder="FR12345678901"
                value={invoiceData.vatNumber}
                onChange={(e) => {
                  const updatedData = { ...invoiceData, vatNumber: e.target.value };
                  setInvoiceData(updatedData);
                  onInvoiceChange(updatedData);
                }}
                required
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="invoiceDate">Date de facture</Label>
              <Input
                id="invoiceDate"
                type="date"
                value={invoiceData.invoiceDate}
                onChange={(e) => {
                  const updatedData = { ...invoiceData, invoiceDate: e.target.value };
                  setInvoiceData(updatedData);
                  onInvoiceChange(updatedData);
                }}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="currency">Devise</Label>
              <Select 
                value={invoiceData.currency} 
                onValueChange={(value) => {
                  const updatedData = { ...invoiceData, currency: value };
                  setInvoiceData(updatedData);
                  onInvoiceChange(updatedData);
                }}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="EUR">EUR - Euro</SelectItem>
                  <SelectItem value="USD">USD - Dollar</SelectItem>
                  <SelectItem value="GBP">GBP - Livre Sterling</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <Separator />

          {/* Invoice Lines */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h4 className="text-sm font-medium">Lignes de facturation</h4>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={addLine}
                className="flex items-center space-x-2"
              >
                <Plus className="h-4 w-4" />
                <span>Ajouter une dépense</span>
              </Button>
            </div>

            {invoiceData.lines.length === 0 ? (
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  Aucune ligne de facturation. Les lignes de rémunération du contrat seront ajoutées automatiquement.
                </AlertDescription>
              </Alert>
            ) : (
              <div className="space-y-3">
                {invoiceData.lines.map((line) => (
                  <div key={line.id} className="grid grid-cols-12 gap-2 items-end p-3 border rounded-lg">
                    <div className="col-span-4 space-y-1">
                      <Label className="text-xs flex items-center space-x-1">
                        <span>Description</span>
                        {line.isAutoGenerated && (
                          <Lock className="h-3 w-3 text-blue-500" title="Ligne du contrat (non modifiable)" />
                        )}
                      </Label>
                      <Input
                        placeholder="Description du service..."
                        value={line.description}
                        onChange={(e) => updateLine(line.id, 'description', e.target.value)}
                        disabled={line.isAutoGenerated}
                        className={line.isAutoGenerated ? 'bg-blue-50 text-blue-800' : ''}
                      />
                    </div>
                    <div className="col-span-2 space-y-1">
                      <Label className="text-xs">Catégorie</Label>
                      <Select 
                        value={line.category} 
                        onValueChange={(value) => updateLine(line.id, 'category', value)}
                        disabled={line.isAutoGenerated}
                      >
                        <SelectTrigger className={line.isAutoGenerated ? 'bg-blue-50 text-blue-800' : ''}>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {invoiceCategories.map(cat => (
                            <SelectItem key={cat.value} value={cat.value}>
                              {cat.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="col-span-1 space-y-1">
                      <Label className="text-xs">Qté</Label>
                      <Input
                        type="number"
                        min="0"
                        step="0.01"
                        value={line.quantity}
                        onChange={(e) => updateLine(line.id, 'quantity', parseFloat(e.target.value) || 0)}
                        disabled={line.isAutoGenerated}
                        className={line.isAutoGenerated ? 'bg-blue-50 text-blue-800' : ''}
                      />
                    </div>
                    <div className="col-span-2 space-y-1">
                      <Label className="text-xs">Prix unitaire</Label>
                      <div className="relative">
                        <Input
                          type="number"
                          min="0"
                          step="0.01"
                          value={line.unitPrice}
                          onChange={(e) => updateLine(line.id, 'unitPrice', parseFloat(e.target.value) || 0)}
                          disabled={line.isAutoGenerated}
                          className={`pr-8 ${line.isAutoGenerated ? 'bg-blue-50 text-blue-800' : ''}`}
                        />
                        <Euro className="absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                      </div>
                    </div>
                    <div className="col-span-2 space-y-1">
                      <Label className="text-xs">Total</Label>
                      <div className="flex items-center space-x-2">
                        <span className={`text-sm font-medium ${line.isAutoGenerated ? 'text-blue-800' : ''}`}>
                          {line.total.toFixed(2)} €
                        </span>
                      </div>
                    </div>
                    <div className="col-span-1">
                      {!line.isAutoGenerated && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => removeLine(line.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          <Separator />

          {/* Invoice Totals */}
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="taxRate">Taux de TVA (%)</Label>
                <Input
                  id="taxRate"
                  type="number"
                  min="0"
                  max="100"
                  step="0.1"
                  value={invoiceData.taxRate}
                  onChange={(e) => updateTaxRate(parseFloat(e.target.value) || 0)}
                />
              </div>
              <div className="space-y-2">
                <Label>Récapitulatif</Label>
                <div className="space-y-1 text-sm bg-gray-50 p-3 rounded">
                  {invoiceData.contractSubtotal > 0 && (
                    <div className="flex justify-between text-blue-700">
                      <span>Contrat de base:</span>
                      <span>{invoiceData.contractSubtotal.toFixed(2)} {invoiceData.currency}</span>
                    </div>
                  )}
                  {invoiceData.expensesSubtotal > 0 && (
                    <div className="flex justify-between text-gray-700">
                      <span>Dépenses annexes:</span>
                      <span>{invoiceData.expensesSubtotal.toFixed(2)} {invoiceData.currency}</span>
                    </div>
                  )}
                  {(invoiceData.contractSubtotal > 0 || invoiceData.expensesSubtotal > 0) && <Separator />}
                  <div className="flex justify-between">
                    <span>Sous-total HT:</span>
                    <span>{invoiceData.subtotal.toFixed(2)} {invoiceData.currency}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>TVA ({invoiceData.taxRate}%):</span>
                    <span>{invoiceData.taxAmount.toFixed(2)} {invoiceData.currency}</span>
                  </div>
                  <Separator />
                  <div className="flex justify-between font-medium text-lg">
                    <span>Total TTC:</span>
                    <span>{invoiceData.total.toFixed(2)} {invoiceData.currency}</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">Notes supplémentaires</Label>
              <Textarea
                id="notes"
                placeholder="Notes ou informations complémentaires..."
                value={invoiceData.notes}
                onChange={(e) => {
                  const updatedData = { ...invoiceData, notes: e.target.value };
                  setInvoiceData(updatedData);
                  onInvoiceChange(updatedData);
                }}
                rows={3}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* External Invoice Upload - Required */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Upload className="h-5 w-5" />
            <span>Facture PDF</span>
            <Badge variant="destructive" className="text-xs">Obligatoire</Badge>
          </CardTitle>
          <p className="text-sm text-gray-600">
            Uploadez votre facture au format PDF (obligatoire)
          </p>
        </CardHeader>
        <CardContent className="space-y-4">
          <Alert className="border-red-200 bg-red-50">
            <AlertCircle className="h-4 w-4 text-red-600" />
            <AlertDescription>
              <p className="text-red-800 text-xs">
                <strong>Obligatoire :</strong> Vous devez uploader une facture PDF pour valider cette mission de service.
              </p>
            </AlertDescription>
          </Alert>
          
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
            <input
              type="file"
              accept=".pdf"
              onChange={handleFileUpload}
              className="hidden"
              id="invoice-upload"
            />
            <label htmlFor="invoice-upload" className="cursor-pointer">
              <div className="space-y-2">
                <FileText className="h-12 w-12 mx-auto text-gray-400" />
                <div>
                  <p className="text-sm text-gray-600">
                    Cliquez pour sélectionner un fichier PDF
                  </p>
                  <p className="text-xs text-gray-500">
                    Format accepté: PDF uniquement
                  </p>
                </div>
              </div>
            </label>
          </div>

          {invoiceData.externalInvoiceFile && (
            <Alert className="border-green-200 bg-green-50">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription>
                <div className="flex items-center justify-between">
                  <span className="text-green-800">
                    Fichier uploadé: {invoiceData.externalInvoiceFile.name}
                  </span>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      const updatedData = { ...invoiceData, externalInvoiceFile: undefined };
                      setInvoiceData(updatedData);
                      onInvoiceChange(updatedData);
                    }}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>
    </div>
  );
}