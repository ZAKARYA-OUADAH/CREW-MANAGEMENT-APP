import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Alert, AlertDescription } from './ui/alert';
import { Badge } from './ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './ui/dialog';
import { projectId, publicAnonKey } from '../utils/supabase/info';
import { 
  Database, 
  Settings, 
  CheckCircle, 
  AlertTriangle, 
  RefreshCw,
  Copy,
  ExternalLink,
  Zap
} from 'lucide-react';

interface SupabaseConfig {
  projectId: string;
  publicAnonKey: string;
}

export default function SupabaseConfigUpdater() {
  const [config, setConfig] = useState<SupabaseConfig>({
    projectId: projectId || '',
    publicAnonKey: publicAnonKey || ''
  });
  
  const [isOpen, setIsOpen] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [updateStatus, setUpdateStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [errors, setErrors] = useState<string[]>([]);

  // Validation des entrées
  const validateConfig = (config: SupabaseConfig): string[] => {
    const errors: string[] = [];
    
    if (!config.projectId) {
      errors.push('Project ID est requis');
    } else if (!/^[a-z0-9]{20}$/.test(config.projectId)) {
      errors.push('Project ID doit contenir exactement 20 caractères alphanumériques minuscules');
    }
    
    if (!config.publicAnonKey) {
      errors.push('Clé publique anonyme est requise');
    } else if (!config.publicAnonKey.startsWith('eyJ')) {
      errors.push('La clé publique anonyme doit être un token JWT valide');
    } else if (config.publicAnonKey.length < 100) {
      errors.push('La clé publique anonyme semble trop courte');
    }
    
    return errors;
  };

  // Vérification de l'état actuel
  const isCurrentConfigValid = (): boolean => {
    return !!(projectId && publicAnonKey && projectId.length === 20 && publicAnonKey.length > 100);
  };

  // Génération du nouveau contenu du fichier info.tsx
  const generateNewInfoFile = (config: SupabaseConfig): string => {
    return `/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

export const projectId = "${config.projectId}"
export const publicAnonKey = "${config.publicAnonKey}"`;
  };

  // Simulation de la mise à jour (en réalité, l'utilisateur devra copier-coller)
  const handleUpdate = async () => {
    setIsUpdating(true);
    setUpdateStatus('idle');
    
    const validationErrors = validateConfig(config);
    if (validationErrors.length > 0) {
      setErrors(validationErrors);
      setIsUpdating(false);
      setUpdateStatus('error');
      return;
    }
    
    setErrors([]);
    
    // Simulation d'un délai de mise à jour
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    setUpdateStatus('success');
    setIsUpdating(false);
  };

  // Détection automatique du nouveau project ID fourni par l'utilisateur
  useEffect(() => {
    // Si le project ID actuel est différent du nouveau fourni, proposer la mise à jour
    if (projectId !== 'nrvzifxdmllgcidfhlzh' && config.projectId !== 'nrvzifxdmllgcidfhlzh') {
      setConfig(prev => ({ ...prev, projectId: 'nrvzifxdmllgcidfhlzh' }));
    }
  }, []);

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const newFileContent = generateNewInfoFile(config);
  const hasChanges = config.projectId !== projectId || config.publicAnonKey !== publicAnonKey;

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button 
          variant="outline" 
          className={`${!isCurrentConfigValid() ? 'border-orange-300 bg-orange-50 text-orange-700' : ''}`}
        >
          <Database className="h-4 w-4 mr-2" />
          Configuration Supabase
          {!isCurrentConfigValid() && (
            <AlertTriangle className="h-3 w-3 ml-2 text-orange-600" />
          )}
        </Button>
      </DialogTrigger>
      
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Settings className="h-5 w-5" />
            <span>Configuration Supabase</span>
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* État actuel */}
          <Alert className={isCurrentConfigValid() ? 'border-green-200 bg-green-50' : 'border-orange-200 bg-orange-50'}>
            <Database className={`h-4 w-4 ${isCurrentConfigValid() ? 'text-green-600' : 'text-orange-600'}`} />
            <AlertDescription>
              <div className="space-y-2">
                <p className={`${isCurrentConfigValid() ? 'text-green-800' : 'text-orange-800'}`}>
                  <strong>Configuration actuelle:</strong> {isCurrentConfigValid() ? 'Valide' : 'Invalide ou incomplète'}
                </p>
                <div className="text-xs space-y-1">
                  <p>Project ID: <code className="bg-white px-1 rounded">{projectId || 'Non défini'}</code></p>
                  <p>Clé publique: <code className="bg-white px-1 rounded">
                    {publicAnonKey ? `${publicAnonKey.substring(0, 20)}...` : 'Non définie'}
                  </code></p>
                </div>
              </div>
            </AlertDescription>
          </Alert>

          {/* Nouvelle configuration détectée */}
          {config.projectId === 'nrvzifxdmllgcidfhlzh' && (
            <Alert className="border-blue-200 bg-blue-50">
              <Zap className="h-4 w-4 text-blue-600" />
              <AlertDescription className="text-blue-800">
                <strong>Nouveau projet détecté:</strong> J'ai détecté que vous utilisez le project ID "nrvzifxdmllgcidfhlzh". 
                Veuillez saisir la clé publique anonyme correspondante ci-dessous.
              </AlertDescription>
            </Alert>
          )}

          {/* Formulaire de configuration */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Nouvelle Configuration</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="projectId">Project ID Supabase</Label>
                <Input
                  id="projectId"
                  value={config.projectId}
                  onChange={(e) => setConfig(prev => ({ ...prev, projectId: e.target.value }))}
                  placeholder="nrvzifxdmllgcidfhlzh"
                  className={config.projectId === 'nrvzifxdmllgcidfhlzh' ? 'border-green-300' : ''}
                />
                <p className="text-xs text-gray-600">
                  Votre Project ID Supabase (20 caractères, visible dans Settings → General)
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="publicAnonKey">Clé Publique Anonyme</Label>
                <Input
                  id="publicAnonKey"
                  value={config.publicAnonKey}
                  onChange={(e) => setConfig(prev => ({ ...prev, publicAnonKey: e.target.value }))}
                  placeholder="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  type="password"
                />
                <p className="text-xs text-gray-600">
                  Votre clé publique anonyme (anon key) depuis Settings → API
                </p>
              </div>

              {/* Erreurs de validation */}
              {errors.length > 0 && (
                <Alert className="border-red-200 bg-red-50">
                  <AlertTriangle className="h-4 w-4 text-red-600" />
                  <AlertDescription className="text-red-800">
                    <ul className="list-disc list-inside space-y-1">
                      {errors.map((error, index) => (
                        <li key={index}>{error}</li>
                      ))}
                    </ul>
                  </AlertDescription>
                </Alert>
              )}

              {/* Statut de mise à jour */}
              {updateStatus === 'success' && (
                <Alert className="border-green-200 bg-green-50">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  <AlertDescription className="text-green-800">
                    Configuration validée ! Copiez le code ci-dessous dans votre fichier.
                  </AlertDescription>
                </Alert>
              )}
            </CardContent>
          </Card>

          {/* Instructions de mise à jour */}
          {hasChanges && updateStatus === 'success' && (
            <Card>
              <CardHeader>
                <CardTitle className="text-lg flex items-center space-x-2">
                  <Copy className="h-4 w-4" />
                  <span>Instructions de Mise à Jour</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>1. Copiez ce code dans le fichier <code>/utils/supabase/info.tsx</code></Label>
                  <div className="relative">
                    <pre className="bg-gray-100 p-4 rounded-lg text-sm overflow-x-auto">
                      <code>{newFileContent}</code>
                    </pre>
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute top-2 right-2"
                      onClick={() => copyToClipboard(newFileContent)}
                    >
                      <Copy className="h-3 w-3" />
                    </Button>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>2. URLs qui seront mises à jour automatiquement</Label>
                  <div className="bg-blue-50 p-3 rounded-lg text-sm">
                    <ul className="space-y-1">
                      <li>• Base URL: <code>https://{config.projectId}.supabase.co</code></li>
                      <li>• Functions: <code>https://{config.projectId}.supabase.co/functions/v1/make-server-9fd39b98/*</code></li>
                      <li>• Auth endpoints utilisés dans ComprehensiveDataDiagnostic</li>
                    </ul>
                  </div>
                </div>

                <Alert className="border-blue-200 bg-blue-50">
                  <ExternalLink className="h-4 w-4 text-blue-600" />
                  <AlertDescription className="text-blue-800">
                    <strong>Important:</strong> Après avoir mis à jour le fichier, rechargez l'application pour que les changements prennent effet.
                  </AlertDescription>
                </Alert>
              </CardContent>
            </Card>
          )}

          {/* Actions */}
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-2">
              <Badge variant="outline">
                Project ID: {config.projectId || 'Non défini'}
              </Badge>
              {config.publicAnonKey && (
                <Badge variant="outline">
                  Clé: {config.publicAnonKey.substring(0, 10)}...
                </Badge>
              )}
            </div>
            
            <div className="flex space-x-2">
              <Button
                variant="outline"
                onClick={() => setIsOpen(false)}
              >
                Annuler
              </Button>
              <Button
                onClick={handleUpdate}
                disabled={isUpdating || !hasChanges}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isUpdating ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    Validation...
                  </>
                ) : (
                  <>
                    <CheckCircle className="h-4 w-4 mr-2" />
                    Valider Configuration
                  </>
                )}
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}